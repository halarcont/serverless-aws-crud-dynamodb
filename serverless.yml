service: aws-lambda-crud-node
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

plugins:
  - serverless-offline
  - serverless-dynamodb
  - serverless-step-functions-local
  - serverless-step-functions
  - serverless-offline-lambda

custom:
  serverless-offline:
    stepFunctionsLocal:
      accountId: 101010101010
      region: us-east-2
      TaskResourceMapping:
      HelloState: arn:aws:lambda:us-east-2:101010101010:function:hello
      WorldState: arn:aws:lambda:us-east-2:101010101010:function:world
      OtherState: arn:aws:lambda:us-east-2:101010101010:function:other
      FillState: arn:aws:lambda:us-east-2:101010101010:function:fill

  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  api:
    handler: src/hello.handler
    events:
      - httpApi:
          path: /
          method: get

  createTask:
    handler: src/addTask.addTask
    events:
      - httpApi:
          path: /tasks
          method: post

  listTask:
    handler: src/listTask.listTask
    events:
      - httpApi:
          path: /tasks
          method: get

  getTask:
    handler: src/getTask.getTask
    events:
      - httpApi:
          path: /tasks/{id}
          method: get

  updateTask:
    handler: src/updateTask.updateTask
    events:
      - httpApi:
          path: /tasks/{id}
          method: put

  deleteTask:
    handler: src/deleteTask.deleteTask
    events:
      - httpApi:
          path: /tasks/{id}
          method: delete

  lambda_child:
    handler: src/lambdaChild.child

  lambda_parent:
    handler: src/lambdaParent.parent
    events:
      - httpApi:
          path: /parent
          method: get

  externalAPI:
    handler: src/externalAPI.joke
    events:
      - httpApi:
          path: /joke
          method: get

  #Step Functions

  hello:
    handler: index.hello
    events:
      - http:
          path: hello
          method: GET
  world:
    handler: index.world
    events:
      - http:
          path: world
          method: GET
  other:
    handler: index.other
    events:
      - http:
          path: other
          method: GET
  fill:
    handler: index.fill
    events:
      - http:
          path: fill
          method: GET
  startSF:
    handler: index.startSF
    events:
      - http:
          path: start
          method: GET

stepFunctions:
  stateMachines:
    DemoStateMachine:
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: WaitUsingSeconds
        States:
          WaitUsingSeconds:
            Type: Wait
            Seconds: 3
            Next: OtherState
          OtherState:
            Type: Task
            Resource:
              Fn::GetAtt: [ other, Arn ]
            Next: ParallelState
          ParallelState:
            Type: Parallel
            ResultPath: "$.result"
            Branches:
              - StartAt: HelloState
                States:
                  HelloState:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ hello, Arn ]
                    End: true
              - StartAt: WorldState
                States:
                  WorldState:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [ world, Arn ]
                    End: true
            Next: FillState
          FillState:
            Type: Task
            Resource:
              Fn::GetAtt: [ fill, Arn ]
            Next: EstadoDeExito
          EstadoDeExito:
            Type: Succeed

resources:
  Resources:
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TaskTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
